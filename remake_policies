#!/bin/bash

	# ====================================================================================
	# remake_policies
	#
	# (This is based on remake_desktop, which combines desktop files.)
	#
	# Recombine the different languages after download into one file. Then this file
	# will be split up and copied manually into the individual policy files.
	#
	# What does this program actually do? We have for each language, the translations
	# of the policy files text. There are 7 policy files each with one line of text
	# to be translated - the message. Therefore, there are 7 lines in each language file.
	#
	# We have to format these 7 lines into the proper xml line, and then splice them
	# together so that all the languages for line 1 are juxtaposed into one block, all the
	# languages for line 2 are juxtaposed, and so on.
	#
	# We could go one step further and write these blocks into each xml file directly,
	# but for the moment we will leave that to be done by hand.
	#
	# Do a visual check before copying by hand, that you are putting each into the
	# right policy file. And retain the default message line, which contains the English
	# which will be used for any language not in this list.
	# ====================================================================================
	
	# ====================================================================================
	# Pre-conditions:
	#	The directory sort/ contains:
	#		remake_policies			(this script)
	#		download/			Transifex language files. We use all of them
	#						even if they have no translations, since there
	#						are only 7 policy files (currently).
	#
	#	Make sure you have removed the English file from the download directory.
	# ====================================================================================
		
	# ____________________________________________________________________________________	
	# Create a work directory so we can repeat the program without affecting original files.
	# ____________________________________________________________________________________	
	
dir_download="download"
dir_work="work"

if [ -d "$dir_work" ]
then	rm -r "$dir_work"
fi

mkdir "$dir_work"
cp -r "$dir_download/"* "$dir_work"

	# ____________________________________________________________________________________	
	# Add newline to last line of files if necessary.
	# It is easier to use od to get character representation of last byte than to try
	# to get integer value of newline in string. (Shell suppresses non-printing characters
	# when passing to script variables.)
	# ____________________________________________________________________________________	

for f in $(ls "$dir_work"/*)
do
	x=$(tail --bytes=1 $f | od -An -tu)
	if [ "$x" -ne 10 ]
	then	echo >> "$f"
	fi
done

	# ____________________________________________________________________________________	
	# Process each language in turn to format their lines properly for xml.
	# That is, turn:
	#		Mise à jour basique
	# into:
	#		    <message xml:lang="fr">Mise à jour basique</message>
	#
	# (Yes, indent 4 spaces.)
	# ____________________________________________________________________________________	

for langfile in $(ls "$dir_work"/*)
do

	echo "$langfile"

		# First get the language code from the file name.
		# eg if the file name is mx-thunar-custom-actions_pt_BR.txt
		# then get pt_BR. Remove everything up to and including the first underscore.
		# Then remove the trailing .txt
		
	flang=${langfile#*_}
	flang=${flang%.*}
	
		# Construct their formatted file name and create it.
		
	formattedfile="$dir_work"'/formatted_'"$flang"'.txt'
	echo -n > "$formattedfile"
		
	let c=0		# Line count
	
		# Read each line of the file.
		
	while read l
	do
	
		let c=c+1
		if [ -z "$l" ]
		then	echo "Line $c: nothing there - $l"
				exit
		fi
				
		echo '    <message xml:lang="'"$flang"'">'"$l"'</message>' >> "$formattedfile"
		
	done < "$langfile"

done

	# Now splice them together.
	
paste -d "\n" $(ls "$dir_work/formatted"*) > all.txt

