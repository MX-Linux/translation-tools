#!/bin/bash

	# ====================================================================
	# Script:	getmxtrans
	# Date:		2016.10.06
	# Author:	old giza
	#
	# Download the language files for one resource -or all.
	# This is less work than using the transifex web interface to download
	# the files one by one.
	#
	# When we say "all", we mean all the ones related to MX which are the
	# ones that begin "mx-" and a few others. And note that some of these
	# are not actively used any more, but get downloaded anyway.
	#
	# Note that this script uses several bash-specific features not
	# available in the dash shell (pointed to by sh).
	# ====================================================================


	# ====================================================================
	# Functions
	# ====================================================================

	# ____________________________________________________________________
	#
	# Download the language files for one resource.
	# ____________________________________________________________________

function fundownload
{
	resource=${reslist[r]}
	extension=${restype[r]}

	echo
	
		# ________________________________________________________________
		#
		# Prepare the resource directory.
		# ________________________________________________________________

	if [ ! -e "downloads/$resource" ]
	then	echo "making $resource sub-directory"
			mkdir "downloads/$resource"
	else	if [ ! -d "downloads/$resource" ]
			then	echo "'""downloads/$resource""'"" exists but is not a directory"
					exit
			else	echo "Removing previous downloads in $resource directory"
					rm 'downloads/'"$resource"'/'*
			fi
	fi

		# ________________________________________________________________
		#
		# Download the languages for this resource.
		# ________________________________________________________________

	echo "Downloading translations files for $resource ..."

	for l in $alllang
	do
		outfile="downloads/$resource/$resource"'_'"$l"'.'"$extension"
		getphrase="$url"'resource/'"$resource"'/translation/'"$l"'/?file'
#		echo
#		echo "$l $outfile $getphrase"
		echo -en "$l""\t"
		curl -s -L --user "$userpass" -o "$outfile" -X GET "$getphrase"
	done
	echo
}

	# ====================================================================
	# Mainline
	# ====================================================================

if [ $# -ne 2 ]
then	echo "getmxtrans: incorrect number of arguments"
	echo "usage: getmxtrans txuser txpassword"
	exit
fi

echo
echo "getmxtrans"
echo "Download from Transifex the translation files for a resource"
echo

alllang="am ar bg ca cs da de el es et eu fa fi fil_PH fr he_IL hi hr hu id is it ja ja_JP kk ko lt mk mr nb nl pl pt pt_BR ro ru sk sl sq sr sv tr uk zh_CN zh_TW"

userpass="$1"':'"$2"
url='https://www.transifex.com/api/2/project/antix-development/'

	# ____________________________________________________________________
	#
	# Get a list of the available resources.
	# We restrict ourselves to the MX related resources, because those are
	# the only ones we are handling. But note that some of the antiX
	# related resources are also used by MX. Those are handled by antiX
	# people, so not touched by this script.
	#
	# We could just list all the resources we need here in an array,
	# like so:
	#
	#	reslist=(			\
	#	null				\
	#	mx-all-desktop-entries		\
	#	mx-bootrepair			\
	#	...
	#	mx-welcome			\
	#	)
	#
	# where we put the zeroeth element to "null" just to avoid zero-
	# based arrays. We would have to keep this array up to date, which
	# isn't a big deal.
	#
	# But instead, we will use the API to get a current list of all
	# resources starting "mx-" together with a few explicit exceptions.
	#
	# Note that this name is the *Transifex* name of the resource. In
	# a few cases, this differs from the github app name:
	#
	# 	app					Transifex
	#	-----------------	----------------------
	#	mx-usb-unmounter	mx-usb-unmounter
	#						mx-usb-unmounter-start
	#	mx-test-installer	mx-test-repo-installer
	#
	# Which means that the directory we create (which is named by
	# resource) does not always correspond to the repo name. No problem.
	# It's just a placeholder for the files till they get copied
	# elsewhere.
	# ____________________________________________________________________
	
	# ____________________________________________________________________
	#
	# We use process substitution to put the output of the piped commands
	# into an array using the mapfile command.
	#
	# (1) So first we get a list of resource info that looks like this ...
	#	[
	#    {
	#        "source_language_code": "en", 
	#        "name": "adddesktop", 
	#        "i18n_type": "PO", 
	#        "priority": "0", 
	#        "slug": "adddesktop", 
	#        "categories": null
	#    }, 
	#    ...
	# (2) We use jq to extract the slug and i18n_type lines to get this:
	#		adddesktop
	#		PO
	#		amendfile
	#		QT
	#		...
	#     Note the use of -r on jq command to remove quoting of output.
	# (3) Then awk to select the resources we are interested in.
	# (4) map the lines into an array, starting at index 1 and removing
	#     trailing newlines.
	# ____________________________________________________________________

declare -a jqlist

mapfile -O 1 -t jqlist < <( \
curl -s -L --user "$userpass" -X GET "$url"'resources/' \
| jq -r '.[] | .slug , .i18n_type' \
| awk '/mx-/ || /apt-notifier/ || /ddm-mx/ || /formatusb/ || /gazelle-/ {print; getline; print}' )

	# ____________________________________________________________________
	#
	# Put the jq lines into two arrays, one for the resource name, the
	# other for the resource type, which we will use for extension.
	# (There is probably an easier way to do this, somehow doing it all
	# in the above command, creating both arrays at once.)
	# ____________________________________________________________________


njq=${#jqlist[@]}

let x=njq%2
if [ "$x" -eq 1 ]
then	echo "odd number of lines!"
		exit
fi


declare -a reslist
declare -a restype

let i=1

let nr=njq/2

while [ $i -le $nr ]
do

	let j=2*i-1
	reslist[i]=${jqlist[j]}
	
	let k=j+1
	x=${jqlist[k]}
	
	case "$x" in
	HTML )	y='html';;
	PO )	y='po';;
	QT )	y='ts';;
	TXT )	y='txt';;
	* )		echo "Unknown resource type $x"
			exit;;
	esac

	restype[i]="$y"
	
#	echo ${reslist[i]} ${restype[i]}
	
	let i=i+1
	
done

	# ____________________________________________________________________
	#
	# Print the resources in two columns.
	# We order by column rather than row just to allow the eye to scan
	# 2 columns rather than many rows.
	#
	# Calculate column offset.
	# ie, if number of resources is 14, then column offset is 7.
	# But if 15, then column offset is 8.
	#
	# Then print each resource.
	# If i is an odd number, then we are doing the left column.
	# If i is even, then we are doing the right. Add the offset.
	# Finally, if i is even or it is the last one, then print the newline.
	# ____________________________________________________________________

nr=${#reslist[@]}
echo
echo "Number of resources $nr"
echo

if [ $(( nr%2 )) -eq 0 ]
then	let offset=nr/2
else	let offset=(nr/2)+1
fi

let i=1

while [ $i -le $nr ]
do
	if [ $(( i%2 )) -eq 1 ]
	then	let r=(i/2)+1
	else	let r=(i/2)+offset
	fi

	resource=${reslist[r]}
	printf '  %5d %-30s' "$r" "$resource"

	if [ $(( i%2 )) -eq 0 ] || [ $i -eq $nr ]
	then	printf '\n'
	fi

	let i=i+1
done

	# ____________________________________________________________________
	#
	# Pick the resource whose translations we want to download.
	# Edit the reply to avoid junk.
	# ${#r} means the number of characters in r, etc.
	# ____________________________________________________________________

read -p "Enter resource number (or 0 for all) - " r

if [ -z $r ]
then	echo "No resource selected"
	exit
fi

[[ $r =~ ^[[:digit:]]+$ ]]
if [ $? -ne 0 ]
then	echo "Not a valid number"
	exit
fi

if [ ${#r} -gt ${#nr} ]
then	echo "Number too large"
	exit
fi

if [ $r -gt $nr ]
then	echo "Number out of range 0 - $nr"
	exit
fi

#if [ $r -eq 0 ]
#then	echo "No resource selected"#
#	exit
#fi

	# ____________________________________________________________________
	#
	# Prepare the download directory.
	# ____________________________________________________________________

if [ ! -e "downloads" ]
then	echo "making downloads directory"
	mkdir "downloads"
else	if [ ! -d "downloads" ]
	then	echo "'downloads' exists but is not a directory, cannot use it"
		exit
	fi
fi

	# ____________________________________________________________________
	#
	# Download one - or all.
	# ____________________________________________________________________

if [ "$r" -ne 0 ]
then	fundownload
else	let r=0
		while [ $r -lt $nr ]
		do
			let r=r+1
			fundownload
		done
fi

exit
